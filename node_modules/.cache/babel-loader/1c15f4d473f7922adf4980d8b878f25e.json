{"ast":null,"code":"var _jsxFileName = \"/home/dhirack/projects/To-Do-List-App-React-V2-/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport AddTaskForm from './components/AddTaskForm.jsx';\nimport UpdateForm from './components/UpdateForm.jsx';\nimport ToDo from './components/ToDo.jsx';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // Tasks (ToDo List) State\n  //////////////////////////\n  const [toDo, setToDo] = useState([{\n    id: 1,\n    title: 'Task 1',\n    status: false\n  }, {\n    id: 2,\n    title: 'Task 2',\n    status: false\n  }]); // Temp State\n  /////////////\n\n  const [newTask, setNewTask] = useState('');\n  const [updateData, setUpdateData] = useState(''); // Add task \n  ///////////\n\n  const addTask = () => {\n    if (newTask) {\n      let num = toDo.length + 1; // let newEntry = { id: num, title: newTask, status: false }\n      // setToDo([...toDo, newEntry])\n      // refactored\n\n      setToDo([...toDo, {\n        id: num,\n        title: newTask,\n        status: false\n      }]);\n      setNewTask('');\n    }\n  }; // Delete task \n  //////////////\n\n\n  const deleteTask = id => {\n    // let newTasks = toDo.filter( task => task.id !== id)\n    // setToDo(newTasks)\n    // refactored\n    setToDo(toDo.filter(task => task.id !== id));\n  }; // Mark task as done or completed\n  /////////////////////////////////\n\n\n  const markDone = id => {\n    // let newTask = toDo.map( task => {\n    //   if( task.id === id ) {\n    //     return ({ ...task, status: !task.status })\n    //   } \n    //   return task\n    // })\n    // setToDo(newTask)\n    // refactored\n    setToDo(toDo.map(task => task.id === id ? { ...task,\n      status: !task.status\n    } : task));\n  }; // Cancel update\n  ////////////////\n\n\n  const cancelUpdate = () => {\n    setUpdateData('');\n  }; // Change task for update\n  /////////////////////////\n\n\n  const changeHolder = e => {\n    // let newEntry = {\n    //   id: updateData.id,\n    //   title: e.target.value,\n    //   status: updateData.status ? true : false\n    // }\n    // setUpdateData(newEntry)\n    // refactored\n    setUpdateData({ ...updateData,\n      title: e.target.value\n    });\n  }; // Update task\n  //////////////\n\n\n  const updateTask = () => {\n    // let filterRecords = [...toDo].filter( task => task.id !== updateData.id )\n    // let updatedObject = [...filterRecords, updateData]\n    // setToDo(updatedObject)\n    // refactored\n    let removeOldRecord = [...toDo].filter(task => task.id !== updateData.id);\n    setToDo([...removeOldRecord, updateData]);\n    setUpdateData('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container App\",\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"To Do List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }, this), updateData && updateData ? /*#__PURE__*/_jsxDEV(UpdateForm, {\n      updateData: updateData,\n      changeHolder: changeHolder,\n      updateTask: updateTask,\n      cancelUpdate: cancelUpdate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(AddTaskForm, {\n      newTask: newTask,\n      setNewTask: setNewTask,\n      addTask: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), toDo && toDo.length ? '' : 'No Tasks...', /*#__PURE__*/_jsxDEV(ToDo, {\n      toDo: toDo,\n      markDone: markDone,\n      setUpdateData: setUpdateData,\n      deleteTask: deleteTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"izSIBJPKBw8Ggq4sGaMcErT6csU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/dhirack/projects/To-Do-List-App-React-V2-/src/App.js"],"names":["useState","AddTaskForm","UpdateForm","ToDo","App","toDo","setToDo","id","title","status","newTask","setNewTask","updateData","setUpdateData","addTask","num","length","deleteTask","filter","task","markDone","map","cancelUpdate","changeHolder","e","target","value","updateTask","removeOldRecord"],"mappings":"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","sourcesContent":["import {useState} from 'react'\nimport AddTaskForm from './components/AddTaskForm.jsx'\nimport UpdateForm from './components/UpdateForm.jsx'\nimport ToDo from './components/ToDo.jsx'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nimport './App.css'\n\nfunction App() {\n\n  // Tasks (ToDo List) State\n  //////////////////////////\n  const [toDo, setToDo] = useState([\n    {id: 1, title: 'Task 1', status: false},\n    {id: 2, title: 'Task 2', status: false}\n  ])\n\n  // Temp State\n  /////////////\n  const [newTask, setNewTask] = useState('')\n  const [updateData, setUpdateData] = useState('')\n\n  // Add task \n  ///////////\n  const addTask = () => {\n    if(newTask) {\n      let num = toDo.length + 1 \n      \n      // let newEntry = { id: num, title: newTask, status: false }\n      // setToDo([...toDo, newEntry])\n\n      // refactored\n      setToDo([\n        ...toDo, \n        { id: num, title: newTask, status: false }\n      ])\n\n      setNewTask('')\n\n    }\n  }\n\n  // Delete task \n  //////////////\n  const deleteTask = (id) => {\n    \n    // let newTasks = toDo.filter( task => task.id !== id)\n    // setToDo(newTasks)\n\n    // refactored\n    setToDo(toDo.filter(task => task.id !== id))\n\n  }\n\n  // Mark task as done or completed\n  /////////////////////////////////\n  const markDone = (id) => {\n    \n    // let newTask = toDo.map( task => {\n    //   if( task.id === id ) {\n    //     return ({ ...task, status: !task.status })\n    //   } \n    //   return task\n    // })\n    // setToDo(newTask)\n\n    // refactored\n    setToDo(toDo.map(\n      task => task.id === id \n      ? ({ ...task, status: !task.status }) \n      : (task) \n    ))\n\n  }\n\n  // Cancel update\n  ////////////////\n  const cancelUpdate = () => {\n    setUpdateData('')\n  }\n\n  // Change task for update\n  /////////////////////////\n  const changeHolder = (e) => {\n\n    // let newEntry = {\n    //   id: updateData.id,\n    //   title: e.target.value,\n    //   status: updateData.status ? true : false\n    // }\n    // setUpdateData(newEntry)\n\n    // refactored\n    setUpdateData({...updateData, title: e.target.value})\n\n  }\n\n  // Update task\n  //////////////\n  const updateTask = () => {\n    \n    // let filterRecords = [...toDo].filter( task => task.id !== updateData.id )\n    // let updatedObject = [...filterRecords, updateData]\n    // setToDo(updatedObject)\n\n    // refactored\n    let removeOldRecord = [...toDo].filter(task => task.id !== updateData.id)\n    setToDo([\n      ...removeOldRecord, \n      updateData\n    ])\n    \n    setUpdateData('')\n\n  }\n\n  return (\n    <div className=\"container App\">\n\n    <br /><br />\n    <h2>To Do List</h2>\n    <br /><br />\n\n    {updateData && updateData ? (\n      <UpdateForm \n        updateData={updateData}\n        changeHolder={changeHolder}\n        updateTask={updateTask}\n        cancelUpdate={cancelUpdate}\n      />\n    ) : (\n      <AddTaskForm \n        newTask={newTask}\n        setNewTask={setNewTask}\n        addTask={addTask}\n      />\n    )}\n\n    {toDo && toDo.length ? '' : 'No Tasks...'}\n\n    <ToDo\n      toDo={toDo}\n      markDone={markDone}\n      setUpdateData={setUpdateData}\n      deleteTask={deleteTask}\n    />  \n\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}